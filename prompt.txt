The purpose of this code is to retime an mp3 recording that includes a piano and an orchestra, to match the timing of a master midi file. This code needs to be refactored into the following steps in two separate scripts (analysis.py and mp3-retime.py:

Analysis Step (analysis.py): 
Inputs:
- the analysis midi instrument file: this file is derived from the recorded mp3, that was subsequently isolated into just the piano, or just the orchestra, that was then subsequently passed through a midi analysis filter tool and turned into midi notes for that instrument (either piano or orchestra)
- the name of the instrument to be analyzed by this script ( either exclusively "piano" or "orchestra"). this script will be run once for each source
- the master midi file that contains all of the instruments that will be used as the timing file

Output:
- a json that keeps track of all of the timing adjustments to the analysis file. the final output should be a dictionary that has the time from zero as the keys, and the playback speed for that section (eg. 0:1, 2:1.1, 3.5:0.95...)
- a jpg that plots the original timing of the analysis midi file, the retimed midi file, and the master midi file

This step will stretch and retime the midi analysis instrument file that was derived from the recording mp3 so that it has maximum overlap, and minimum non-overlap with its corresponding track in the master midi file

The algorithm should do the following:
1 - in the first pass, the analysis midi needs to be stretched so that it is the same length as the master midi file
2 - in the next set of passes, the following recursion needs to occur. 
    *the midi needs to be bisected at the midpoint
    *the midpoint needs to be moved first to the left, so that the section that preceeds the midpoint shrinks, and the section that follows the midpoint expands
    *all of the notes that fall in the two sections need to be compared with the corresponding notes in the same time frame in the master midi file, to determine overlap of identical notes and non-overlap of everything else
    *the midpoint needs to be moved to the right, so that the section that preceeds the midpoint expands, and the section that follows the midpoint shrinks
    *all of the notes that fall in the two sections need to be compared with the corresponding notes in the same time frame in the master midi file, to determine overlap of identical notes and non-overlap of everything else
    *the midpoint movement that reports maximum overlap and minimum non-overlap is the winning position, and the notes need to be set to this position, and the playback speeds need to be logged into the dictionary
    *each section is further bisected at its midpoint and the process repeats, where at the initial pass there are 2 sections, the second there are 4, the third 8, the fourth 16, etc.
3 - the recursive bisection and retiming of the midpoints stop when the section resolution is less than 4 seconds long
4 - save the timing dictionary as a json, and the jpg graph


MP3 Retiming (mp3-retime.py)
Inputs:
- the mp3 file
- the piano retiming dictionary
- the orchestra retiming dictionary

Output:
- a wav file

The two dictionaries need to be combined and averaged together. Then the timing change needs to be applied to the sound file, such that the pitch is maintained with the retimed music

Write these two algorithms as two separate scripts and fully implement every step of the code.


